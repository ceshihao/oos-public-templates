FormatVersion: OOS-2019-06-01
Description:
  name-en: ACS::OOS::BuildDockerImage
  name-zh-cn: 构建Docker镜像
  en: Build Docker Image and Upload to ACR
  zh-cn: 构建Docker镜像并上传至阿里云镜像仓库
Parameters:
  regionId:
    Description:
      en: The ID of region
      zh-cn: 地域ID
    Type: String
    Default: '{{ ACS::RegionId }}'
    AssociationProperty: RegionId
  codeSource:
    Label:
      en: CodeResource
      zh-cn: 代码源
    Type: String
    AllowedValues:
      - oss
      - git
  codeSourceUrl:
    Label:
      en: CodeResourceUrl
      zh-cn: 代码源链接
    Type: String
  buildType:
    Label:
      en: Build Type
      zh-cn: 构建类型
    Type: String
    Default: ExistingEcs
    AllowedValues:
      - ExistingEcs
      - NewTemporaryEcs
    AssociationPropertyMetadata:
      ValueLabelMapping:
        ExistingEcs: 在已有ECS构建
        NewTemporaryEcs: 新启动临时ECS构建
  instanceId:
    Label:
      en: ECSInstanceId
      zh-cn: ECS实例ID
    Type: String
    Default: ''
    AssociationProperty: ALIYUN::ECS::Instance::InstanceId
    AssociationPropertyMetadata:
      RegionId: regionId
      Visible:
        Condition:
          Fn::Equals:
            - ${buildType}
            - 'ExistingEcs'
      Required:
        Condition:
          Fn::Equals:
            - ${buildType}
            - 'ExistingEcs'
  zoneId:
    Type: String
    Label:
      en: Availability Zone
      zh-cn: 可用区
    Default: ''
    AssociationProperty: ZoneId
    AssociationPropertyMetadata:
      RegionId: ALIYUN::ECS::RegionId
      Visible:
        Condition:
          Fn::Equals:
            - ${buildType}
            - 'NewTemporaryEcs'
      Required:
        Condition:
          Fn::Equals:
            - ${buildType}
            - 'NewTemporaryEcs'
  ecsInstanceType:
    Type: String
    Label:
      en: Instance Type
      zh-cn: 实例类型
    Default: ecs.g6.large
    AssociationProperty: ALIYUN::ECS::Instance::InstanceType
    AssociationPropertyMetadata:
      ZoneId: ${zoneId}
      InstanceChargeType: PostPaid
      Visible:
        Condition:
          Fn::Equals:
            - ${buildType}
            - 'NewTemporaryEcs'
      Required:
        Condition:
          Fn::Equals:
            - ${buildType}
            - 'NewTemporaryEcs'
  imageId:
    Type: String
    Label:
      en: Image ID
      zh-cn: 镜像ID
    Description:
      en: Image ID, represents the image resource to startup one ECS instance
      zh-cn: 镜像ID，ECS实例的镜像资源
    AssociationProperty: ALIYUN::ECS::Image::ImageId
    AssociationPropertyMetadata:
      InstanceType: ${ecsInstanceType}
      SupportedImageOwnerAlias:
        - system
        - self
        - others
      Visible:
        Condition:
          Fn::Equals:
            - ${buildType}
            - 'NewTemporaryEcs'
      Required:
        Condition:
          Fn::Equals:
            - ${buildType}
            - 'NewTemporaryEcs'
    Default: centos_7
  allocatePublicIP:
    Type: Boolean
    Label:
      en: Allocate Public IP
      zh-cn: 分配公网IP
    Default: true
    AssociationPropertyMetadata:
      Visible:
        Condition:
          Fn::Equals:
            - ${buildType}
            - 'NewTemporaryEcs'
      Required:
        Condition:
          Fn::Equals:
            - ${buildType}
            - 'NewTemporaryEcs'
  buildScript:
    Label:
      en: Build Command
      zh-cn: 构建命令
    Description:
      en: Build Command, represents the command to build the container image
      zh-cn: buildScript会在docker build之前执行，以便您做一些构建准备的工作，如果不需要构建准备，可以不填写
    Type: String
    MaxLength: 16384
    AssociationProperty: ALIYUN::OOS::Command::CommandContent
    AssociationPropertyMetadata:
      CommandType: RunShellScript
    Default: |-
      # java sample command
      # mvn -B clean package -Dmaven.test.skip=true -Dautoconfig.skip
      
      # golang sample command
      # go build
      
      # nodejs sample command
      # cnpm install && npm run build
  dockerFilePath:
    Label:
      en: Dockerfile Path
      zh-cn: Dockerfile路径
    Description:
      en: Dockerfile Path as the path of the Dockerfile file relative to the root directory of the code repository
      zh-cn: Dockerfile路径为Dockerfile文件相对于代码库根目录所在路径
    Default: 'Dockerfile'
    Type: String
  contextPath:
    Label:
      en: Context Path
      zh-cn: 上下文路径
    Description:
      en: Context Path as the path of the context directory relative to the root directory of the code repository
      zh-cn: ContextPath为docker build命令执行上下文路径,填写相对于代码根目录的路径, 如.代表代码根目录。如果不填写，默认为Dockerfile文件所在目录。
    Type: String
    Default: ''
  imageVersion:
    Label:
      en: Image Version
      zh-cn: 镜像版本
    Description:
      en: Image Version, represents the version of the container image to upload
      zh-cn: 要构建的镜像版本
    Type: String
    Default: 'v-{{ACS::CurrentDate}}-{{ACS::ExecutionId}}'
  acrId:
    Label:
      en: ACR ID
      zh-cn: 容器镜像仓库ID
    Description:
      en: ACR ID, represents the container image repository to upload
      zh-cn: 要上传的容器镜像仓库ID
    Type: String
    AssociationProperty: ALIYUN::CR::Instance::InstanceId
  namespace:
    Label:
      en: NameSpace
      zh-cn: 命名空间
    Description:
      en: namespace, represents the namespace of the container image to upload
      zh-cn: 要上传的容器镜像仓库命名空间
    Type: String
    AssociationProperty: ALIYUN::CR::NameSpace::Name
    AssociationPropertyMetadata:
      InstanceId: ${acrId}
      Attribute: NamespaceName
  repoName:
    Label:
      en: Repo Name
      zh-cn: 仓库名称
    Description:
      en: Repo Name, represents the name of the container image to upload
      zh-cn: 要上传的容器镜像仓库名称
    Type: String
    AssociationProperty: ALIYUN::CR::Repository::RepoName
    AssociationPropertyMetadata:
      RegionId: ${regionId}
      InstanceId: ${acrId}
      RepoNamespaceName: ${namespace}
      RepoStatus: ALL
Tasks:
  - Name: createTemporaryEcs
    When:
      Fn::Equals:
        - '{{ buildType }}'
        - NewTemporaryEcs
    OnError: deleteTemporaryEcs
    Action: ACS::ROS::CreateStack
    Description:
      en: Create temporary ECS
      zh-cn: 创建临时ecs
    Properties:
      regionId: '{{ regionId }}'
      stackName:
        Fn::Replace:
          - .: _
          - OOS-{{ACS::ExecutionId}}
      disableRollback: true
      templateBody: |-
        {
          "ROSTemplateFormatVersion": "2015-09-01",
          "Description": "Create ECS Ram Role",
          "Parameters": {
            "ZoneId": {
              "Type": "String",
              "Label": {
                "en": "Availability Zone",
                "zh-cn": "可用区"
              },
              "AssociationProperty": "ZoneId",
              "AssociationPropertyMetadata": {
                "RegionId": "ALIYUN::ECS::RegionId"
              }
            },
            "EcsInstanceType": {
              "Type": "String",
              "Label": {
                "en": "Instance Type",
                "zh-cn": "实例类型"
              },
              "AssociationProperty": "ALIYUN::ECS::Instance::InstanceType",
              "AssociationPropertyMetadata": {
                "ZoneId": "${ZoneId}",
                "InstanceChargeType": "PostPaid"
              }
            },
            "ImageId": {
              "Type": "String",
              "Label": {
                "en": "Image ID",
                "zh-cn": "镜像ID"
              },
              "Description": {
                "en": "Image ID, represents the image resource to startup one ECS instance",
                "zh-cn": "镜像ID，ECS实例的镜像资源"
              },
              "AssociationProperty": "ALIYUN::ECS::Image::ImageId",
              "AssociationPropertyMetadata": {
                "InstanceType": "${EcsInstanceType}",
                "SupportedImageOwnerAlias": [
                  "system",
                  "self",
                  "others"
                ]
              },
              "Default": "centos_7"
            },
            "AllocatePublicIP": {
              "Type": "Boolean",
              "Label": {
                "en": "Allocate Public IP",
                "zh-cn": "分配公网IP"
              },
              "Description": {
                "en": "Whether to allocate public IP",
                "zh-cn": "是否分配公网IP"
              },
              "Default": "true"
            }
          },
          "Resources": {
            "EcsVpc": {
              "Type": "ALIYUN::ECS::VPC",
              "Properties": {
                "CidrBlock": "192.168.0.0/16",
                "VpcName": {
                  "Ref": "ALIYUN::StackName"
                }
              }
            },
            "EcsVSwitch": {
              "Type": "ALIYUN::ECS::VSwitch",
              "Properties": {
                "ZoneId": {
                  "Ref": "ZoneId"
                },
                "VpcId": {
                  "Ref": "EcsVpc"
                },
                "CidrBlock": "192.168.1.0/24"
              }
            },
            "EcsSecurityGroup": {
              "Type": "ALIYUN::ECS::SecurityGroup",
              "Properties": {
                "VpcId": {
                  "Ref": "EcsVpc"
                }
              }
            },
            "EcsInstanceGroup": {
              "Type": "ALIYUN::ECS::InstanceGroup",
              "Properties": {
                "InternetMaxBandwidthOut": 10,
                "ZoneId": {
                  "Ref": "ZoneId"
                },
                "VpcId": {
                  "Ref": "EcsVpc"
                },
                "VSwitchId": {
                  "Ref": "EcsVSwitch"
                },
                "SecurityGroupId": {
                  "Ref": "EcsSecurityGroup"
                },
                "ImageId": {
                  "Ref": "ImageId"
                },
                "IoOptimized": "optimized",
                "MaxAmount": 1,
                "InstanceType": {
                  "Ref": "EcsInstanceType"
                },
                "InstanceName": {
                  "Fn::Join": [
                    "-",
                    [
                      {
                        "Ref": "ALIYUN::StackName"
                      },
                      "[1,4]"
                    ]
                  ]
                },
                "AllocatePublicIP": {
                  "Ref": "AllocatePublicIP"
                }
              }
            }
          },
          "Outputs": {
            "EcsInstanceId": {
              "Value": {
                "Fn::GetAtt": [
                  "EcsInstanceGroup",
                  "InstanceIds"
                ]
              }
            }
          }
        }
      parameters:
        - ParameterKey: ZoneId
          ParameterValue: '{{ zoneId }}'
        - ParameterKey: EcsInstanceType
          ParameterValue: '{{ ecsInstanceType }}'
        - ParameterKey: ImageId
          ParameterValue: '{{ imageId }}'
        - ParameterKey: AllocatePublicIP
          ParameterValue: '{{ allocatePublicIP }}'
    Outputs:
      stackId:
        Type: String
        ValueSelector: stackId
  - Name: getEcsInstanceId
    When:
      Fn::Equals:
        - '{{ buildType }}'
        - NewTemporaryEcs
    Action: ACS::ExecuteAPI
    OnError: deleteTemporaryEcs
    Description:
      en: Get ECS info
      zh-cn: 获取ecs信息
    Properties:
      Service: ROS
      API: GetStack
      Parameters:
        StackId: '{{createTemporaryEcs.stackId}}'
    Outputs:
      instanceId:
        Type: String
        ValueSelector: .Outputs[0].OutputValue[0]
  - Name: downloadCodeFromOss
    Action: ACS::ECS::DownloadFile
    OnError: deleteTemporaryEcs
    When:
      Fn::Equals:
        - '{{ codeSource }}'
        - oss
    Description:
      en: Download code from OSS
      zh-cn: 从OSS下载代码
    Properties:
      regionId: '{{ regionId }}'
      instanceId:
        Fn::If:
          - Fn::Equals:
            - '{{ buildType }}'
            - 'NewTemporaryEcs'
          - '{{ getEcsInstanceId.instanceId }}'
          - '{{ instanceId }}'
      sourceType: https
      sourcePath: '{{ codeSourceUrl }}'
      destinationDir: .
  - Name: downloadCodeFromGit
    Action: ACS::ECS::RunCommand
    OnError: deleteTemporaryEcs
    When:
      Fn::Equals:
        - '{{ codeSource }}'
        - git
    Description:
      en: Download code from git
      zh-cn: 从git下载代码
    Properties:
      regionId: '{{ regionId }}'
      instanceId:
        Fn::If:
          - Fn::Equals:
              - '{{ buildType }}'
              - 'NewTemporaryEcs'
          - '{{ getEcsInstanceId.instanceId }}'
          - '{{ instanceId }}'
      commandType: RunShellScript
      commandContent: |-
        #!/bin/bash
        # Function to install git on Ubuntu/Debian
        install_git_debian() {
            echo "Installing git..."
            sudo apt-get install git -y
        }

        # Function to install git on CentOS/Red Hat
        install_git_centos() {
            echo "Installing git..."
            sudo yum install git -y
        }

        # Identify the Operating System
        . /etc/os-release

        case $ID in
            ubuntu|debian)
                echo "Detected system: Ubuntu/Debian"
                install_git_debian
                ;;
            centos|rhel)
                echo "Detected system: CentOS/Red Hat"
                install_git_centos
                ;;
            *)
                echo "Unsupported Operating System: $ID"
                exit 1
                ;;
        esac

        echo "Git installation script has completed."
        mkdir -p /root/workspace/{{ACS::ExecutionId}}
        cd /root/workspace/{{ACS::ExecutionId}}
        git clone {{ codeSourceUrl }} .
  - Name: installDocker
    OnError: deleteTemporaryEcs
    Description:
      en: Install environment
      zh-cn: 安装环境
    Action: ACS::ECS::ConfigureOOSPackageWithTemporaryURL
    Properties:
      regionId: '{{ regionId }}'
      instanceId:
        Fn::If:
          - Fn::Equals:
              - '{{ buildType }}'
              - 'NewTemporaryEcs'
          - '{{ getEcsInstanceId.instanceId }}'
          - '{{ instanceId }}'
      action: install
      packageName: ACS-Extension-DockerCE-1563457855438522
  - Name: runCommandToBuild
    Action: ACS::ECS::RunCommand
    OnError: deleteTemporaryEcs
    Description:
      en: Run command to build
      zh-cn: 执行构建命令
    Properties:
      workingDir: /root/workspace/{{ACS::ExecutionId}}
      regionId: '{{ regionId }}'
      instanceId:
        Fn::If:
          - Fn::Equals:
              - '{{ buildType }}'
              - 'NewTemporaryEcs'
          - '{{ getEcsInstanceId.instanceId }}'
          - '{{ instanceId }}'
      commandType: RunShellScript
      commandContent: '{{ buildScript }}'
  - Name: generateAuthorizationToken
    Action: ACS::CR::GetAuthorizationToken
    OnError: deleteTemporaryEcs
    Description:
      en: Generate authorization token
      zh-cn: 生成授权令牌
    Properties:
      instanceId: '{{ acrId }}'
    Outputs:
      tempUsername:
        Type: String
        ValueSelector: tempUsername
      authorizationToken:
        Type: String
        ValueSelector: authorizationToken
  - Name: getAcrName
    Action: ACS::ExecuteAPI
    OnError: deleteTemporaryEcs
    Description:
      en: Get ACR name
      zh-cn: 获取acr名称
    Properties:
      Service: CR
      API: GetInstance
      Parameters:
        InstanceId: '{{acrId}}'
    Outputs:
      acrName:
        Type: String
        ValueSelector: .InstanceName
  - Name: dockerLoginAndPush
    Action: ACS::ECS::RunCommand
    OnError: deleteTemporaryEcs
    Description:
      en: Login to ACR and push image
      zh-cn: 登录到acr并推送镜像
    Properties:
      regionId: '{{ regionId }}'
      instanceId:
        Fn::If:
          - Fn::Equals:
              - '{{ buildType }}'
              - 'NewTemporaryEcs'
          - '{{ getEcsInstanceId.instanceId }}'
          - '{{ instanceId }}'
      commandType: RunShellScript
      workingDir: /root/workspace/{{ACS::ExecutionId}}
      commandContent:
        Fn::Sub:
          - |-
              docker build -f {{dockerFilePath}} -t {{getAcrName.acrName}}-registry.{{regionId}}.cr.aliyuncs.com/{{namespace}}/{{repoName}}:{{imageVersion}} ${FinalContextPath}
              docker login --username={{ generateAuthorizationToken.tempUsername }} --password={{ generateAuthorizationToken.authorizationToken }} {{ getAcrName.acrName }}-registry.{{ regionId }}.cr.aliyuncs.com
              docker push {{getAcrName.acrName}}-registry.{{regionId}}.cr.aliyuncs.com/{{namespace}}/{{repoName}}:{{imageVersion}}
          - FinalContextPath:
              Fn::If:
                - Fn::Equals:
                    - '{{ contextPath }}'
                    - ''
                - Fn::If:
                    - Fn::ContainsSubString:
                        - '{{ dockerFilePath }}'
                        - /
                    - Fn::Join:
                        - /
                        - Fn::RangeSelect:
                            - 0
                            - -1
                            - Fn::Split:
                                - /
                                - '{{ dockerFilePath }}'
                    - '.'
                - '{{ contextPath }}'
  - Name: deleteTemporaryEcs
    Action: ACS::ROS::DeleteStack
    When:
      Fn::Equals:
        - '{{ buildType }}'
        - NewTemporaryEcs
    Description:
      en: Delete temporary ECS and grant acr permission
      zh-cn: 删除临时ecs并授予acr权限
    Properties:
      regionId: '{{ regionId }}'
      stackId: '{{ createTemporaryEcs.stackId }}'
      retainAllResources: false
Metadata:
  ALIYUN::OOS::Interface:
    ParameterGroups:
      - Parameters:
          - regionId
        Label:
          default:
            zh-cn: 地域信息
            en: Region
      - Parameters:
          - codeSource
          - codeSourceUrl
        SubTitle: 代码源链接一般来自代码源步骤的输出
        Label:
          default:
            zh-cn: 指定代码源
            en: Code Source
      - Parameters:
          - buildType
          - zoneId
          - ecsInstanceType
          - imageId
          - allocatePublicIP
          - instanceId
        SubTitle: 选择构建Ecs相关信息，支持使用已有ECS和临时启动ECS(会产生费用)
        Label:
          default:
            zh-cn: 选择构建Ecs
            en: Choose Building Ecs
      - Parameters:
          - buildScript
        Label:
          default:
            zh-cn: 构建配置
            en: Build Configuration
      - Parameters:
          - dockerFilePath
          - contextPath
          - acrId
          - namespace
          - repoName
          - imageVersion
        Label:
          default:
            zh-cn: docker构建并上传acr仓库
            en: Docker Build and Upload ACR Repository
